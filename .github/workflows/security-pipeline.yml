name: Pipeline de Seguran칞a DevSecOps Unificado

# --- GATILHOS AUTOM츼TICOS ---
# Este pipeline ser치 acionado automaticamente nos seguintes eventos:
on:
  # Quando um push for feito na branch 'main'
  push:
    branches: [ main ]
  # Quando um Pull Request for aberto ou atualizado para a branch 'main'
  pull_request:
    branches: [ main ]

# --- JOBS (ETAPAS DO PIPELINE) ---
jobs:
  # --- JOB 1: An치lise Est치tica e de Depend칡ncias ---
  build-and-scan:
    name: 1. Build, SCA e SAST
    runs-on: ubuntu-latest

    permissions:
      security-events: write
      actions: read
      contents: read

    steps:
      # Passo 1: Clona o c칩digo do reposit칩rio para a m치quina do pipeline
      - name: Checkout do c칩digo
        uses: actions/checkout@v3

      # Passo 2: Configura o ambiente Node.js (necess치rio para o Snyk CLI)
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      # Passo 3: Instala as depend칡ncias Python do projeto
      - name: Setup Python e Instalar Depend칡ncias
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
      - run: pip install -r requirements.txt

      # --- SCA (Software Composition Analysis) ---
      - name: Executar An치lise de Depend칡ncias (SCA) com Snyk
        uses: snyk/actions/python-3.9@master
        env:
          # Usa o segredo SNYK_TOKEN que configuramos no GitHub
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          # --- QUALITY GATE DO SCA ---
          # O comando 'test' ir치 falhar o pipeline se encontrar
          # qualquer vulnerabilidade de severidade 'high' ou 'critical'.
          args: --severity-threshold=high

      # --- SAST (Static Application Security Testing) ---
      - name: Inicializar o CodeQL (SAST)
        uses: github/codeql-action/init@v3
        with:
          languages: python

      - name: Executar a an치lise do CodeQL (SAST)
        uses: github/codeql-action/analyze@v3

  # --- JOB 2: An치lise Din칙mica ---
  dynamic-analysis:
    name: 2. An치lise Din칙mica (DAST)
    runs-on: ubuntu-latest
    # Este job s칩 come칞ar치 DEPOIS que o job 'build-and-scan' terminar com sucesso
    needs: build-and-scan

    steps:
      - name: Checkout do c칩digo
        uses: actions/checkout@v3

      # --- DAST (Dynamic Application Security Testing) ---
      - name: Executar An치lise Din칙mica (DAST) com OWASP ZAP
        uses: zaproxy/action-baseline@v0.10.0
        with:
          # --- QUALITY GATE DO DAST ---
          # A regra '-r' gera o relat칩rio HTML.
          # A regra '-l' define o n칤vel de alerta para falhar. 'WARN' inclui
          # vulnerabilidades de risco m칠dio e alto. 'FAIL' seria apenas para alto.
          cmd_options: '-r zap_report.html -l WARN'
          # O ZAP precisa de um alvo. Como nosso projeto Python n칚o 칠
          # facilmente execut치vel em um pipeline simples, usaremos um alvo de exemplo.
          # Em um projeto real, aqui estaria a URL da sua aplica칞칚o em um ambiente de staging.
          target: 'https://www.zaproxy.org/'

      # Passo opcional para que possamos ver o relat칩rio do DAST
      - name: Upload do Relat칩rio DAST
        uses: actions/upload-artifact@v3
        with:
          name: Relatorio-DAST-ZAP
          path: zap_report.html

  # --- JOB 3: Notifica칞칚o em caso de falha ---
  notification-on-failure:
    name: 3. Notificar Falha
    runs-on: ubuntu-latest
    # Este job s칩 roda se os jobs anteriores falharem
    if: failure()
    # Ele precisa saber que os jobs anteriores existem
    needs: [build-and-scan, dynamic-analysis]

    steps:
      - name: Enviar notifica칞칚o para o Slack
        uses: rtCamp/action-slack-notify@v2
        env:
          # Usa o segredo que acabamos de configurar
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_TITLE: '游뚿 Falha no Pipeline de Seguran칞a!'
          SLACK_MESSAGE: 'O pipeline no reposit칩rio ${{ github.repository }} falhou. Verifique os logs para mais detalhes.'
          SLACK_COLOR: 'danger' # 'danger' para vermelho
          MSG_MINIMAL: true

