name: Pipeline de Seguran√ßa DevSecOps Unificado

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build-and-scan:
    name: 1. Build, Testes Unit√°rios e SCA/SAST
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      actions: read
      contents: read

    steps:
      - uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Instalar depend√™ncias Python
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov PyJWT gunicorn

      - name: Inicializar banco de dados SQLite
        run: python -c "from app import init_db; init_db()"

      - name: Rodar testes com pytest
        run: |
          mkdir -p reports
          pytest tests/ --maxfail=1 --disable-warnings -v | tee reports/pytest.log
        continue-on-error: false

      - name: Upload dos logs de teste
        uses: actions/upload-artifact@v4
        with:
          name: pytest-logs
          path: reports/pytest.log

      - name: Instalar Snyk CLI
        # Requer instala√ß√£o do NPM para o Snyk CLI
        run: npm install -g snyk

      - name: Executar SCA com Snyk
        run: snyk test --severity-threshold=high --fail-on=all --skip-unresolved
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

      - name: Inicializar CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: python

      - name: Executar an√°lise CodeQL
        uses: github/codeql-action/analyze@v3
        env:
          CODEQL_FAIL_ON_ALERT: "true"

      - name: Upload do Database SQLite
        uses: actions/upload-artifact@v4
        with:
          name: application-db
          path: database.db

  dynamic-analysis:
    name: 2. An√°lise Din√¢mica (DAST) com Snyk
    runs-on: ubuntu-latest
    needs: build-and-scan

    steps:
      - uses: actions/checkout@v3

      - name: Download do Database SQLite
        uses: actions/download-artifact@v4
        with:
          name: application-db

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Instalar depend√™ncias Python
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest PyJWT gunicorn

      # Instalar o Snyk CLI tamb√©m neste job
      - name: Instalar Snyk CLI
        run: npm install -g snyk

      # --- Inicia a Aplica√ß√£o Flask (sem Docker) ---
      - name: Iniciar Aplica√ß√£o Flask em background
        run: |
          # Rodar o Flask na porta 5000 do host
          gunicorn --bind 0.0.0.0:5000 app:app &
          FLASK_PID=$!
          echo "FLASK_PID=$FLASK_PID" >> $GITHUB_ENV
        env:
          FLASK_APP: app.py
          FLASK_ENV: production

      - name: Aguardar o Flask Iniciar (Health Check)
        run: |
          echo "‚è≥ Aguardando Flask iniciar em http://localhost:5000..."
          for i in {1..30}; do
            if curl -s http://localhost:5000/ > /dev/null; then
              echo "‚úÖ Flask dispon√≠vel!"
              break
            fi
            sleep 2
          done

      - name: Criar pasta reports
        run: mkdir -p reports

      # --- NOVO PASSO: Executar Snyk para DAST (URL Scan) ---
      - name: Executar Snyk URL Scan (DAST)
        # O Snyk CLI escaneia a URL que est√° exposta no localhost
        run: |
          snyk monitor --url=http://localhost:5000 --severity-threshold=high --json > reports/snyk_dast_report.json
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

      # NOTA: A verifica√ß√£o de falha √© feita pela flag --fail-on-all no SCA/SAST.
      # Para o DAST, o snyk monitor n√£o retorna c√≥digo de falha para vulnerabilidades,
      # apenas reporta. Voc√™ pode usar snyk test --url=... para falhar o pipeline se quiser.

      - name: Upload do Relat√≥rio DAST
        uses: actions/upload-artifact@v4
        with:
          name: Relatorio-DAST-Snyk
          path: reports/snyk_dast_report.json

      - name: Encerrar Aplica√ß√£o Flask
        if: always()
        run: kill ${{ env.FLASK_PID }}

  notification-on-failure:
    name: 3. Notificar Falha
    runs-on: ubuntu-latest
    if: failure()
    needs: [build-and-scan, dynamic-analysis]

    steps:
      - name: Enviar notifica√ß√£o para o Slack
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_TITLE: "üö® Falha no Pipeline de Seguran√ßa!"
          SLACK_MESSAGE: "O pipeline no reposit√≥rio ${{ github.repository }} falhou. Verifique os logs para mais detalhes."
          SLACK_COLOR: "danger"
          MSG_MINIMAL: true
