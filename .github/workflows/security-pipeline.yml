name: Pipeline de Seguran√ßa DevSecOps Unificado

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build-and-scan:
    name: 1. Build, Testes Unit√°rios e SCA/SAST
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      actions: read
      contents: read

    steps:
      - uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Instalar depend√™ncias Python
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov PyJWT

      - name: Criar banco de dados SQLite
        run: python -c "from app import init_db; init_db()"

      - name: Rodar testes com pytest
        run: |
          mkdir -p reports
          pytest tests/ --maxfail=1 --disable-warnings -v | tee reports/pytest.log
        continue-on-error: false

      - name: Upload dos logs de teste
        uses: actions/upload-artifact@v4
        with:
          name: pytest-logs
          path: reports/pytest.log

      - name: Instalar Snyk CLI
        run: npm install -g snyk

      - name: Executar SCA com Snyk
        run: snyk test --severity-threshold=high --fail-on=all --skip-unresolved
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

      - name: Inicializar CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: python

      - name: Executar an√°lise CodeQL
        uses: github/codeql-action/analyze@v3
        env:
          CODEQL_FAIL_ON_ALERT: "true"

  dynamic-analysis:
    name: 2. An√°lise Din√¢mica (DAST)
    runs-on: ubuntu-latest
    needs: build-and-scan

    # --- CONFIGURA√á√ÉO DE SERVI√áOS DO DOCKER ---
    services:
      # Servi√ßo da Aplica√ß√£o Flask
      app:
        image: my-flask-app
        options: >-
          --name flask-app
          --health-cmd "curl -f http://localhost:5000 || exit 1" 
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          --pull never # <-- CORRE√á√ÉO: For√ßa o uso da imagem local
        ports:
          - 5000:5000

      # Servi√ßo do OWASP ZAP
      zap:
        image: ghcr.io/zaproxy/zaproxy:stable
        options: --hostname zap-scanner
        ports:
          - 8080:8080

    steps:
      - uses: actions/checkout@v3

      - name: Criar Dockerfile tempor√°rio
        run: |
          cat > Dockerfile <<'EOF'
          FROM python:3.10-slim
          WORKDIR /app
          COPY . .
          RUN pip install --no-cache-dir -r requirements.txt
          EXPOSE 5000
          CMD ["python", "app.py"]
          EOF

      - name: Build Docker image do Flask
        # Este passo constr√≥i a imagem local 'my-flask-app'
        run: docker build -t my-flask-app .

      - name: Aguardar o Flask iniciar e passar no Health Check
        run: |
          echo "Aguardando o servi√ßo 'app' (Flask) iniciar..."
          for i in {1..30}; do
            if curl -s http://localhost:5000/ > /dev/null; then
              echo "‚úÖ Flask dispon√≠vel!"
              break
            fi
            sleep 2
          done

      - name: Instalar jq para an√°lise de JSON
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Criar pasta reports
        run: mkdir -p reports

      - name: Executar ZAP Baseline Scan (Comando Docker Direto)
        run: |
          # TARGET: O ZAP acessa a aplica√ß√£o pelo nome do servi√ßo 'app' e sua porta interna (5000)
          TARGET="http://app:5000"
          REPORT_DIR="/zap/wrk"

          docker run --rm -v ${{ github.workspace }}/reports:${REPORT_DIR}:rw \
            --network ${{ job.services.app.network }} \
            ghcr.io/zaproxy/zaproxy:stable \
            zap-baseline.py \
            -t $TARGET \
            -r ${REPORT_DIR}/zap_report.html \
            -J ${REPORT_DIR}/zap_report.json \
            -l FAIL \
            -I

      - name: Verificar vulnerabilidades cr√≠ticas ZAP
        run: |
          CRITICAL=$(jq '.alerts[] | select(.risk=="High") | .name' reports/zap_report.json)
          if [ ! -z "$CRITICAL" ]; then
            echo "üö® Vulnerabilidades cr√≠ticas encontradas:"
            echo "$CRITICAL"
            exit 1
          else
            echo "‚úÖ Nenhuma vulnerabilidade cr√≠tica encontrada."
          fi

      - name: Upload do Relat√≥rio DAST
        uses: actions/upload-artifact@v4
        with:
          name: Relatorio-DAST-ZAP
          path: reports/

  notification-on-failure:
    name: 3. Notificar Falha
    runs-on: ubuntu-latest
    if: failure()
    needs: [build-and-scan, dynamic-analysis]

    steps:
      - name: Enviar notifica√ß√£o para o Slack
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_TITLE: "üö® Falha no Pipeline de Seguran√ßa!"
          SLACK_MESSAGE: "O pipeline no reposit√≥rio ${{ github.repository }} falhou. Verifique os logs para mais detalhes."
          SLACK_COLOR: "danger"
          MSG_MINIMAL: true
