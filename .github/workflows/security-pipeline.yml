name: 🛡️ Pipeline de Segurança DevSec

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]

permissions:
  contents: write # necessário para publicar no GitHub Pages

jobs:
  security-pipeline:
    runs-on: ubuntu-latest
    env:
      SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      CODEQL_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - name: 🔹 Checkout do código
        uses: actions/checkout@v4

      - name: 🔹 Configurar Node e Python
        uses: actions/setup-node@v4
        with:
          node-version: 20
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: 🔹 Instalar dependências Python
        run: |
          python -m pip install --upgrade pip
          pip install pytest requests flask

      - name: 🔹 Instalar dependências Node
        run: |
          npm install -g snyk
          npm install

      - name: 🔹 Autenticar no GHCR (evitar login denied)
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u $ --password-stdin || echo "⚠️ Login GHCR falhou (pode ser ignorado)"

      - name: 🔹 Criar rede Docker segura
        run: |
          docker network create zapnet || true

      - name: 🧪 Executar Testes Unitários (Pytest)
        run: |
          pytest -v || { echo "❌ Testes falharam!"; exit 1; }

      - name: 🛡️ Snyk SAST Scan
        run: |
          snyk auth $SNYK_TOKEN || { echo "⚠️ Erro ao autenticar no Snyk"; exit 1; }
          snyk test --severity-threshold=medium || { echo "❌ Vulnerabilidades críticas detectadas pelo Snyk"; exit 1; }

      - name: 🧱 Build Docker Image do App
        run: |
          docker build -t app-security:latest . --network zapnet || { echo "❌ Falha ao construir imagem"; exit 1; }

      - name: 🚀 Rodar Container Temporário do App
        run: |
          docker run -d --rm --network zapnet --name app -p 5000:5000 app-security:latest || exit 1
          echo "⏳ Aguardando app iniciar..."
          sleep 10

      - name: 🔍 ZAP DAST Scan (usando GHCR)
        run: |
          mkdir -p reports
          docker pull ghcr.io/zaproxy/zaproxy:stable || { echo "⚠️ Falha ao puxar imagem ZAP"; exit 1; }
          docker run --rm --network zapnet \
            -v $(pwd)/reports:/zap/wrk/:rw \
            ghcr.io/zaproxy/zaproxy:stable zap-baseline.py \
            -t http://app:5000 \
            -r zap_report.html || echo "⚠️ ZAP retornou alertas (não crítico)"

      - name: 🧠 CodeQL - Inicializar
        uses: github/codeql-action/init@v3
        with:
          languages: python, javascript

      - name: 🧠 CodeQL - Executar Análise
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:python"

      - name: 📤 Publicar Relatórios como artefato
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: relatorios-seguranca
          path: |
            reports/zap_report.html
            test-results/

      - name: 📤 Preparar relatório para o GitHub Pages
        if: always()
        run: |
          mkdir -p ./public
          cp reports/zap_report.html ./public/index.html || echo "<h1>Nenhum relatório ZAP encontrado</h1>" > ./public/index.html

      - name: 🌐 Publicar no GitHub Pages
        if: always()
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./public

      - name: 🧹 Encerrar Containers
        if: always()
        run: |
          docker stop app || true
          docker network rm zapnet || true
