name: Pipeline de Seguran칞a DevSecOps Unificado

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  # Job 1: Build, Testes Unit치rios e An치lise Est치tica
  build-and-scan:
    name: 1. Build, Testes Unit치rios e SCA/SAST
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      actions: read
      contents: read

    steps:
      - name: Checkout do c칩digo
        uses: actions/checkout@v3

      # Setup Python
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"

      - name: Instalar depend칡ncias Python
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov jwt

      # Inicializar banco SQLite para testes
      - name: Criar banco de dados SQLite
        run: python -c "from app import init_db; init_db()"

      # Rodar Testes Unit치rios
      - name: Rodar testes com pytest
        run: |
          mkdir -p reports
          pytest tests/ --maxfail=1 --disable-warnings -v | tee reports/pytest.log

      # An치lise de Depend칡ncias (SCA) com Snyk
      - name: Executar SCA com Snyk
        uses: snyk/actions/python-3.9@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high --fail-on=all

      # An치lise Est치tica (SAST) com CodeQL
      - name: Inicializar CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: python

      - name: Executar an치lise CodeQL
        uses: github/codeql-action/analyze@v3
        env:
          CODEQL_FAIL_ON_ALERT: "true"

  # Job 2: An치lise Din칙mica (DAST)
  dynamic-analysis:
    name: 2. An치lise Din칙mica (DAST)
    runs-on: ubuntu-latest
    needs: build-and-scan

    steps:
      - name: Checkout do c칩digo
        uses: actions/checkout@v3

      # Setup Python
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"

      - name: Instalar depend칡ncias Python
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # Rodar Flask em background
      - name: Iniciar servidor Flask
        run: |
          nohup python app.py &> reports/flask.log &
          sleep 5

      # Executar DAST com OWASP ZAP
      - name: Executar DAST com OWASP ZAP
        uses: zaproxy/action-baseline@v0.10.0
        with:
          cmd_options: "-r reports/zap_report.html -l FAIL"
          target: "http://127.0.0.1:5000"

      # Upload do Relat칩rio DAST
      - name: Upload do Relat칩rio DAST
        uses: actions/upload-artifact@v3
        with:
          name: Relatorio-DAST-ZAP
          path: reports/zap_report.html

  # Job 3: Notifica칞칚o em caso de falhas
  notification-on-failure:
    name: 3. Notificar Falha
    runs-on: ubuntu-latest
    if: failure()
    needs: [build-and-scan, dynamic-analysis]

    steps:
      - name: Enviar notifica칞칚o para o Slack
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_TITLE: "游뚿 Falha no Pipeline de Seguran칞a!"
          SLACK_MESSAGE: "O pipeline no reposit칩rio ${{ github.repository }} falhou. Verifique os logs para mais detalhes."
          SLACK_COLOR: "danger"
          MSG_MINIMAL: true
