name: Pipeline de Seguran칞a DevSecOps Unificado

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build-and-scan:
    name: 1. Build, Testes Unit치rios e SCA/SAST
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      actions: read
      contents: read

    steps:
      - uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"

      - name: Instalar depend칡ncias Python
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov PyJWT

      - name: Criar banco de dados SQLite
        run: python -c "from app import init_db; init_db()"

      - name: Rodar testes com pytest
        run: |
          mkdir -p reports
          pytest tests/ --maxfail=1 --disable-warnings -v | tee reports/pytest.log
        continue-on-error: false

      - name: Upload dos logs de teste
        uses: actions/upload-artifact@v4
        with:
          name: pytest-logs
          path: reports/pytest.log

      - name: Instalar Snyk CLI
        run: npm install -g snyk

      - name: Executar SCA com Snyk
        run: snyk test --severity-threshold=high --fail-on=all --skip-unresolved
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

      - name: Inicializar CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: python

      - name: Executar an치lise CodeQL
        uses: github/codeql-action/analyze@v3
        env:
          CODEQL_FAIL_ON_ALERT: "true"

  dynamic-analysis:
    name: 2. An치lise Din칙mica (DAST)
    runs-on: ubuntu-latest
    needs: build-and-scan

    steps:
      - uses: actions/checkout@v3

      - name: Build Docker image do Flask
        run: docker build -t my-flask-app .

      - name: Criar network Docker
        run: docker network create zap-net || true

      - name: Rodar Flask em Docker na network
        run: docker run -d --name flask-app --network zap-net -p 5000:5000 my-flask-app

      - name: Esperar Flask estar pronto
        run: |
          for i in {1..30}; do
            curl -f http://localhost:5000/ && break || sleep 2
          done

      - name: Criar pasta reports
        run: mkdir -p reports

      - name: Executar DAST com OWASP ZAP
        uses: zaproxy/action-baseline@v0.10.0
        with:
          target: "http://flask-app:5000"
          cmd_options: "-r reports/zap_report.html -J reports/zap_report.json -l FAIL"
          container_name: zap-dast
          network: zap-net

      - name: Verificar vulnerabilidades cr칤ticas ZAP
        run: |
          CRITICAL=$(jq '.alerts[] | select(.risk=="High") | .name' reports/zap_report.json)
          if [ ! -z "$CRITICAL" ]; then
            echo "Vulnerabilidades cr칤ticas encontradas!"
            exit 1
          else
            echo "Nenhuma vulnerabilidade cr칤tica encontrada."
          fi

      - name: Upload do Relat칩rio DAST
        uses: actions/upload-artifact@v4
        with:
          name: Relatorio-DAST-ZAP
          path: reports/

  notification-on-failure:
    name: 3. Notificar Falha
    runs-on: ubuntu-latest
    if: failure()
    needs: [build-and-scan, dynamic-analysis]

    steps:
      - name: Enviar notifica칞칚o para o Slack
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_TITLE: "游뚿 Falha no Pipeline de Seguran칞a!"
          SLACK_MESSAGE: "O pipeline no reposit칩rio ${{ github.repository }} falhou. Verifique os logs para mais detalhes."
          SLACK_COLOR: "danger"
          MSG_MINIMAL: true
